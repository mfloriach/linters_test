runner:
  # golint:
  #   cmd: golint $(go list ./... | grep -v /vendor/)
  #   format: golint
  #   level: warning
  # govet:
  #   cmd: go vet $(go list ./... | grep -v /vendor/)
  #   format: govet
  # errcheck:
  #   cmd: errcheck -asserts -ignoretests -blank $(go list ./... | grep -v /vendor/)
  #   errorformat:
  #     - "%f:%l:%c:%m"
  #   level: warning
  # staticcheck:
  #   cmd: staticcheck $(go list ./... | grep -v /vendor/)
  #   errorformat:
  #     - "%f:%l:%c: %m"
  # misspell:
  #   cmd: misspell $(git ls-files)
  #   errorformat:
  #     - "%f:%l:%c: %m"
  # unparam:
  #   cmd: unparam $(go list ./... | grep -v /vendor/)
  #   errorformat:
  #     - "%f:%l:%c: %m"
  # revive:
  #   cmd: revive -config=.revive.toml $(go list ./... | grep -v /vendor/)
  #   format: golint
  #   level: warning
  golangci:
    cmd: make linter --out-format=line-number ./...
    errorformat:
      - '%E%f:%l:%c: %m'
      - '%E%f:%l: %m'
      - '%C%.%#'
    level: warning
  # architecture:
  #   cmd: golangci-lint run --out-format=line-number ./...
  #   errorformat:
  #     - '%E%f:%l:%c: %m'
  #     - '%E%f:%l: %m'
  #     - '%C%.%#'
  #   level: warning
  # metrics:
  #   cmd: golangci-lint run --out-format=line-number ./...
  #   errorformat:
  #     - '%E%f:%l:%c: %m'
  #     - '%E%f:%l: %m'
  #     - '%C%.%#'
  #   level: warning